// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for better type safety and consistency
enum UserRole {
  ADMIN
  CLIENT
  SUPPORT
  MODERATOR
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  FEATURE_REQUEST
  BUG_REPORT
  PROJECT_SETUP
}

enum UpdateType {
  COMMENT
  STATUS_CHANGE
  PRIORITY_CHANGE
  ASSIGNMENT
  INTERNAL_NOTE
}

// Payment and subscription enums
enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
  PAUSED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  SUBSCRIPTION
  ONE_TIME
  SETUP_FEE
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

// User model - integrates with Clerk authentication
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  phone     String?
  role      UserRole @default(CLIENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Stripe customer ID
  stripeCustomerId String? @unique

  // Relationships
  ticketsCreated  Ticket[]       @relation("TicketCreator")
  ticketsAssigned Ticket[]       @relation("TicketAssignee")
  ticketUpdates   TicketUpdate[]
  sessions        Session[]
  Attachment      Attachment[]

  // Payment relationships
  subscriptions Subscription[]
  payments      Payment[]
  invoices      Invoice[]

  @@map("users")
}

// Role definitions (if you need more granular permissions)
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json? // Store permissions as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

// Main ticket model
model Ticket {
  id          String         @id @default(cuid())
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    TicketCategory @default(GENERAL)

  // User relationships
  createdById String
  createdBy   User   @relation("TicketCreator", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("TicketAssignee", fields: [assignedToId], references: [id])

  // Metadata
  isResolved Boolean   @default(false)
  resolvedAt DateTime?
  closedAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  updates TicketUpdate[]

  @@map("tickets")
}

// Ticket updates (comments, status changes, notes)
model TicketUpdate {
  id       String     @id @default(cuid())
  ticketId String
  userId   String
  type     UpdateType @default(COMMENT)
  content  String

  // For status/priority changes
  oldValue String?
  newValue String?

  // Internal notes (only visible to admins/support)
  isInternal Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  ticket      Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id])
  attachments Attachment[]

  @@map("ticket_updates")
}

// Attachment model for file uploads
model Attachment {
  id             String   @id @default(cuid())
  filename       String
  originalName   String
  url            String
  fileType       String
  fileSize       Int
  uploadedById   String
  ticketUpdateId String
  createdAt      DateTime @default(now())

  // Relationships
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])
  ticketUpdate TicketUpdate @relation(fields: [ticketUpdateId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// Session model for enhanced auth tracking (optional - Clerk handles most of this)
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Subscription model
model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  stripeSubscriptionId String             @unique
  stripePriceId        String
  stripeCustomerId     String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  endedAt              DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]
  invoices Invoice[]

  @@map("subscriptions")
}

// Payment model
model Payment {
  id                    String        @id @default(cuid())
  userId                String
  subscriptionId        String?
  stripePaymentIntentId String        @unique
  amount                Int // Amount in cents
  currency              String        @default("usd")
  status                PaymentStatus
  type                  PaymentType
  description           String?
  receiptUrl            String?
  invoiceId             String?

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  invoice      Invoice?      @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

// Invoice model
model Invoice {
  id              String        @id @default(cuid())
  userId          String
  subscriptionId  String?
  stripeInvoiceId String        @unique
  number          String        @unique
  status          InvoiceStatus
  subtotal        Int // Amount in cents
  tax             Int // Tax amount in cents
  total           Int // Total amount in cents
  currency        String        @default("usd")
  description     String?

  // Dates
  invoiceDate DateTime
  dueDate     DateTime?
  paidAt      DateTime?
  voidedAt    DateTime?

  // URLs
  invoiceUrl String?
  pdfUrl     String?

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  payments     Payment[]

  @@map("invoices")
}

// Pricing plan model (for display purposes)
model PricingPlan {
  id                        String   @id @default(cuid())
  name                      String   @unique
  description               String
  price                     Int // Amount in cents
  stripePriceId             String   @unique
  stripeSubscriptionPriceId String   @unique
  features                  Json // Array of features
  isPopular                 Boolean  @default(false)
  isActive                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("pricing_plans")
}

// Indexes for better performance
// These will be created automatically by Prisma
